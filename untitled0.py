# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BVwKyyoOxzTYZVfX3X9fhf-UlYxsySyY
"""

import tensorflow as tf
import numpy as np

# Celda 1: instalar / importar librer칤as
# En Colab muchas librer칤as ya vienen instaladas, pero aseguramos opencv y tqdm
!pip install --quiet opencv-python-headless==4.7.0.72 tqdm

import os, random, math, zipfile
from tqdm import tqdm
import numpy as np
import matplotlib.pyplot as plt
import cv2
import tensorflow as tf
from tensorflow.keras import layers, models
from sklearn.model_selection import train_test_split
from google.colab import files
from IPython.display import display, Image
print("TensorFlow versi칩n:", tf.__version__)

# Par치metros
import os
IMG_SIZE = 64  # tama침o de imagen cuadrada
SAMPLES_PER_CLASS = 800  # ajusta si quieres m치s datos
DATA_DIR = "/content/dataset_shapes"
CLASS_NAMES = ["circle", "square", "rectangle", "triangle"]

print("Parametros:", IMG_SIZE, SAMPLES_PER_CLASS, DATA_DIR)
os.makedirs(DATA_DIR, exist_ok=True)
for c in CLASS_NAMES:
    os.makedirs(os.path.join(DATA_DIR, c), exist_ok=True)

import matplotlib.pyplot as plt
import numpy as np

# ======= C칈RCULO =======
def dibujar_circulo(radio=2):
    angulo = np.linspace(0, 2 * np.pi, 100)
    x = radio * np.cos(angulo)
    y = radio * np.sin(angulo)

    plt.figure()
    plt.plot(x, y)
    plt.title("C칤rculo")
    plt.axis("equal")
    plt.grid(True)
    plt.show()

dibujar_circulo()


# ======= RECT츼NGULO =======
def dibujar_rectangulo(ancho=4, alto=2):
    x = [0, ancho, ancho, 0, 0]
    y = [0, 0, alto, alto, 0]

    plt.figure()
    plt.plot(x, y)
    plt.title("Rect치ngulo")
    plt.axis("equal")
    plt.grid(True)
    plt.show()

dibujar_rectangulo()


# ======= CUADRADO =======
def dibujar_cuadrado(lado=3):
    x = [0, lado, lado, 0, 0]
    y = [0, 0, lado, lado, 0]

    plt.figure()
    plt.plot(x, y)
    plt.title("Cuadrado")
    plt.axis("equal")
    plt.grid(True)
    plt.show()

dibujar_cuadrado()


# ======= TRI츼NGULO =======
def dibujar_triangulo(base=4, altura=3):
    x = [0, base, base/2, 0]
    y = [0, 0, altura, 0]

    plt.figure()
    plt.plot(x, y)
    plt.title("Tri치ngulo")
    plt.axis("equal")
    plt.grid(True)
    plt.show()

dibujar_triangulo()

import matplotlib.pyplot as plt
import random, glob

plt.figure(figsize=(7,6))
for i, fig in enumerate(CLASS_NAMES):
    archivos = glob.glob(os.path.join(DATA_DIR, fig, "*.png"))
    img = cv2.imread(random.choice(archivos), cv2.IMREAD_GRAYSCALE)
    plt.subplot(2,2,i+1)
    plt.imshow(img, cmap='gray')
    plt.title(fig.upper())
    plt.axis('off')
plt.suptitle("Ejemplos del dataset generado")
plt.show()

import tensorflow as tf

lote = 32

ds_entrenamiento = tf.keras.utils.image_dataset_from_directory(
    DATA_DIR,
    labels="inferred",
    label_mode="int",
    validation_split=0.20,
    subset="training",
    seed=123,
    color_mode="grayscale",
    image_size=(IMG_SIZE, IMG_SIZE),
    batch_size=lote
)

ds_validacion = tf.keras.utils.image_dataset_from_directory(
    DATA_DIR,
    labels="inferred",
    label_mode="int",
    validation_split=0.20,
    subset="validation",
    seed=123,
    color_mode="grayscale",
    image_size=(IMG_SIZE, IMG_SIZE),
    batch_size=lote
)

print(" Dataset cargado")
print("Clases:", CLASS_NAMES)

normalizar = tf.keras.layers.Rescaling(1./255)

ds_entrenamiento = ds_entrenamiento.map(lambda x, y: (normalizar(x), y)).cache().prefetch(tf.data.AUTOTUNE)
ds_validacion = ds_validacion.map(lambda x, y: (normalizar(x), y)).cache().prefetch(tf.data.AUTOTUNE)

print(" Normalizaci칩n aplicada")

from tensorflow.keras import models, layers

modelo = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 1)),
    layers.MaxPooling2D(),

    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D(),

    layers.Conv2D(128, (3,3), activation='relu'),
    layers.Flatten(),

    layers.Dropout(0.3),
    layers.Dense(128, activation='relu'),
    layers.Dense(len(CLASS_NAMES), activation='softmax')
])

modelo.compile(optimizer='adam',
               loss='sparse_categorical_crossentropy',
               metrics=['accuracy'])

modelo.summary()
print(" Modelo listo")

from tensorflow.keras.callbacks import EarlyStopping

parar = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

historial = modelo.fit(
    ds_entrenamiento,
    validation_data=ds_validacion,
    epochs=25,
    callbacks=[parar]
)

print(" Entrenamiento finalizado")

from tensorflow.keras.callbacks import EarlyStopping

parar = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

historial = modelo.fit(
    ds_entrenamiento,
    validation_data=ds_validacion,
    epochs=25,
    callbacks=[parar]
)

print(" Entrenamiento finalizado")

import matplotlib.pyplot as plt

resultado = modelo.evaluate(ds_validacion)
print(f"游늵 Exactitud: {resultado[1]*100:.2f}%")

plt.figure(figsize=(12,4))
plt.subplot(1,2,1)
plt.plot(historial.history['loss'], label="Entrenamiento")
plt.plot(historial.history['val_loss'], label="Validaci칩n")
plt.title("P칠rdida")
plt.legend()

plt.subplot(1,2,2)
plt.plot(historial.history['accuracy'], label="Entrenamiento")
plt.plot(historial.history['val_accuracy'], label="Validaci칩n")
plt.title("Exactitud")
plt.legend()
plt.show()

from google.colab import files
from tensorflow.keras.preprocessing import image
import numpy as np

archivos = files.upload()

for nombre in archivos.keys():
    img = image.load_img(nombre, color_mode='grayscale', target_size=(IMG_SIZE, IMG_SIZE))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    pred = modelo.predict(img_array)[0]
    indice = int(np.argmax(pred))
    confianza = float(np.max(pred))

    print(f" Imagen: {nombre}")
    print(f" Predicci칩n: {CLASS_NAMES[indice].upper()} - Confianza: {confianza:.2f}")
    print("-"*40)

from google.colab import files
from tensorflow.keras.preprocessing import image
import numpy as np

archivos = files.upload()

for nombre in archivos.keys():
    img = image.load_img(nombre, color_mode='grayscale', target_size=(IMG_SIZE, IMG_SIZE))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    pred = modelo.predict(img_array)[0]
    indice = int(np.argmax(pred))
    confianza = float(np.max(pred))

    print(f" Imagen: {nombre}")
    print(f" Predicci칩n: {CLASS_NAMES[indice].upper()} - Confianza: {confianza:.2f}")
    print("-"*40)

from google.colab import files
from tensorflow.keras.preprocessing import image
import numpy as np

archivos = files.upload()

for nombre in archivos.keys():
    img = image.load_img(nombre, color_mode='grayscale', target_size=(IMG_SIZE, IMG_SIZE))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    pred = modelo.predict(img_array)[0]
    indice = int(np.argmax(pred))
    confianza = float(np.max(pred))

    print(f" Imagen: {nombre}")
    print(f" Predicci칩n: {CLASS_NAMES[indice].upper()} - Confianza: {confianza:.2f}")
    print("-"*40)

from google.colab import files
from tensorflow.keras.preprocessing import image
import numpy as np

archivos = files.upload()

for nombre in archivos.keys():
    img = image.load_img(nombre, color_mode='grayscale', target_size=(IMG_SIZE, IMG_SIZE))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    pred = modelo.predict(img_array)[0]
    indice = int(np.argmax(pred))
    confianza = float(np.max(pred))

    print(f" Imagen: {nombre}")
    print(f" Predicci칩n: {CLASS_NAMES[indice].upper()} - Confianza: {confianza:.2f}")
    print("-"*40)